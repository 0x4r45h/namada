pub mod gas;
pub mod storage;
mod tendermint;

use std::path::Path;
use std::sync::mpsc;

use anoma::proto::types::Tx;
use anoma::wallet;
use anoma_shared::bytes::ByteBuf;
use anoma_shared::types::token::Amount;
use anoma_shared::types::{
    address, key, token, Address, BlockHash, BlockHeight, Key,
};
use borsh::BorshSerialize;
use prost::Message;
use thiserror::Error;

use self::gas::BlockGasMeter;
use self::storage::PersistentStorage;
use self::tendermint::{AbciMsg, AbciReceiver};
use crate::protocol;
use crate::vm::host_env::write_log::WriteLog;

#[derive(Error, Debug)]
pub enum Error {
    #[error("Error removing the DB data: {0}")]
    RemoveDB(std::io::Error),
    #[error("Storage error: {0}")]
    StorageError(storage::Error),
    #[error("Shell ABCI channel receiver error: {0}")]
    AbciChannelRecvError(mpsc::RecvError),
    #[error("Shell ABCI channel sender error: {0}")]
    AbciChannelSendError(String),
    #[error("Error decoding a transaction from bytes: {0}")]
    TxDecodingError(prost::DecodeError),
    #[error("Error trying to apply a transaction: {0}")]
    TxError(protocol::Error),
}

pub type Result<T> = std::result::Result<T, Error>;

pub fn run(config: anoma::config::Ledger) -> Result<()> {
    // open a channel between ABCI (the sender) and the shell (the receiver)
    let (sender, receiver) = mpsc::channel();
    let shell = Shell::new(receiver, &config.db);
    // Run Tendermint ABCI server in another thread
    std::thread::spawn(move || tendermint::run(sender, config));
    shell.run()
}

pub fn reset(config: anoma::config::Ledger) -> Result<()> {
    // simply nuke the DB files
    let db_path = &config.db;
    match std::fs::remove_dir_all(&db_path) {
        Err(e) if e.kind() == std::io::ErrorKind::NotFound => (),
        res => res.map_err(Error::RemoveDB)?,
    };
    // reset Tendermint state
    tendermint::reset(config);
    Ok(())
}

#[derive(Debug)]
pub struct Shell {
    abci: AbciReceiver,
    storage: storage::PersistentStorage,
    // The gas meter is sync with mutex to allow VPs sharing it
    // TODO it should be possible to impl a lock-free gas metering for VPs
    gas_meter: BlockGasMeter,
    write_log: WriteLog,
}

#[derive(Clone, Debug)]
pub enum MempoolTxType {
    /// A transaction that has not been validated by this node before
    NewTransaction,
    /// A transaction that has been validated at some previous level that may
    /// need to be validated again
    RecheckTransaction,
}

pub struct MerkleRoot(pub Vec<u8>);

impl Shell {
    pub fn new(abci: AbciReceiver, db_path: impl AsRef<Path>) -> Self {
        let mut storage = PersistentStorage::new(db_path);

        let token_vp = std::fs::read("vps/vp_token/vp.wasm")
            .expect("cannot load token VP");
        let user_vp =
            std::fs::read("vps/vp_user/vp.wasm").expect("cannot load user VP");

        // TODO load initial accounts from genesis

        // temporary account addresses for testing, generated by the address.rs
        // module
        let ada = Address::decode("a1qq5qqqqqg4znssfsgcurjsfhgfpy2vjyxy6yg3z98pp5zvp5xgersvfjxvcnx3f4xycrzdfkak0xhx")
            .expect("The genesis address shouldn't fail decoding");
        let alan = Address::decode("a1qq5qqqqqxv6yydz9xc6ry33589q5x33eggcnjs2xx9znydj9xuens3phxppnwvzpg4rrqdpswve4n9")
        .expect("The genesis address shouldn't fail decoding");
        let alonzo = Address::decode("a1qq5qqqqqxsuygd2x8pq5yw2ygdryxs6xgsmrsdzx8pryxv34gfrrssfjgccyg3zpxezrqd2y2s3g5s")
            .expect("The genesis address shouldn't fail decoding");
        let xan = address::xan();
        let btc = address::btc();
        let xtz = address::xtz();

        // default tokens VPs for testing
        let xan_vp = Key::validity_predicate(&xan).expect("expected VP key");
        let btc_vp = Key::validity_predicate(&btc).expect("expected VP key");
        let xtz_vp = Key::validity_predicate(&xtz).expect("expected VP key");
        storage
            .write(&xan_vp, token_vp.to_vec())
            .expect("Unable to write token VP");
        storage
            .write(&btc_vp, token_vp.to_vec())
            .expect("Unable to write token VP");
        storage
            .write(&xtz_vp, token_vp.to_vec())
            .expect("Unable to write token VP");

        // default user VPs for testing
        let ada_vp = Key::validity_predicate(&ada).expect("expected VP key");
        let alan_vp = Key::validity_predicate(&alan).expect("expected VP key");
        let alonzo_vp =
            Key::validity_predicate(&alonzo).expect("expected VP key");
        storage
            .write(&ada_vp, user_vp.to_vec())
            .expect("Unable to write user VP");
        storage
            .write(&alan_vp, user_vp.to_vec())
            .expect("Unable to write user VP");
        storage
            .write(&alonzo_vp, user_vp.to_vec())
            .expect("Unable to write user VP");

        // default user's tokens for testing
        let ada_xan = token::balance_key(&xan, &ada);
        let ada_btc = token::balance_key(&btc, &ada);
        let alan_xan = token::balance_key(&xan, &alan);
        let alonzo_xan = token::balance_key(&xan, &alonzo);
        let alonzo_xtz = token::balance_key(&xtz, &alonzo);

        storage
            .write(
                &ada_xan,
                Amount::whole(800_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &ada_btc,
                Amount::whole(100)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &alan_xan,
                Amount::whole(200_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &alonzo_xan,
                Amount::whole(1_000_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &alonzo_xtz,
                Amount::whole(50_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");

        // default user's public keys for testing
        let ada_pk = key::ed25519::pk_key(&ada);
        let alan_pk = key::ed25519::pk_key(&alan);
        let alonzo_pk = key::ed25519::pk_key(&alonzo);

        storage
            .write(
                &ada_pk,
                wallet::ada_pk().try_to_vec().expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");
        storage
            .write(
                &alan_pk,
                wallet::alan_pk().try_to_vec().expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");
        storage
            .write(
                &alonzo_pk,
                wallet::alonzo_pk().try_to_vec().expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");

        // Temporary for testing, we have a fixed matchmaker account.
        // This account has a public key for signing matchmaker txs and
        // verifying their signatures in its VP. The VP is the same as
        // the user's VP, which simply checks the signature.
        // We could consider using the same key as the intent broadcaster's p2p
        // key.
        let matchmaker = address::matchmaker();
        let matchmaker_pk = key::ed25519::pk_key(&matchmaker);
        storage
            .write(
                &matchmaker_pk,
                wallet::matchmaker_pk()
                    .try_to_vec()
                    .expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");
        let matchmaker_vp =
            Key::validity_predicate(&matchmaker).expect("expected VP key");
        storage
            .write(&matchmaker_vp, user_vp.to_vec())
            .expect("Unable to write matchmaker VP");

        Self {
            abci,
            storage,
            gas_meter: BlockGasMeter::default(),
            write_log: WriteLog::new(),
        }
    }

    /// Run the shell in the current thread (blocking).
    pub fn run(mut self) -> Result<()> {
        loop {
            let msg = self.abci.recv().map_err(Error::AbciChannelRecvError)?;
            match msg {
                AbciMsg::GetInfo { reply } => {
                    let result = self.last_state();
                    reply.send(result).map_err(|e| {
                        Error::AbciChannelSendError(format!("GetInfo {}", e))
                    })?
                }
                AbciMsg::InitChain { reply, chain_id } => {
                    self.init_chain(chain_id)?;
                    reply.send(()).map_err(|e| {
                        Error::AbciChannelSendError(format!("InitChain {}", e))
                    })?
                }
                AbciMsg::MempoolValidate { reply, tx, r#type } => {
                    let result = self
                        .mempool_validate(&tx, r#type)
                        .map_err(|e| format!("{}", e));
                    reply.send(result).map_err(|e| {
                        Error::AbciChannelSendError(format!(
                            "MempoolValidate {}",
                            e
                        ))
                    })?
                }
                AbciMsg::BeginBlock {
                    reply,
                    hash,
                    height,
                } => {
                    self.begin_block(hash, height);
                    reply.send(()).map_err(|e| {
                        Error::AbciChannelSendError(format!("BeginBlock {}", e))
                    })?
                }
                AbciMsg::ApplyTx { reply, tx } => {
                    let (gas, result) = self.apply_tx(&tx);
                    let result = result.map_err(|e| e.to_string());
                    reply.send((gas, result)).map_err(|e| {
                        Error::AbciChannelSendError(format!("ApplyTx {}", e))
                    })?
                }
                AbciMsg::EndBlock { reply, height } => {
                    self.end_block(height);
                    reply.send(()).map_err(|e| {
                        Error::AbciChannelSendError(format!("EndBlock {}", e))
                    })?
                }
                AbciMsg::CommitBlock { reply } => {
                    let result = self.commit();
                    reply.send(result).map_err(|e| {
                        Error::AbciChannelSendError(format!(
                            "CommitBlock {}",
                            e
                        ))
                    })?
                }
                AbciMsg::AbciQuery {
                    reply,
                    path,
                    data,
                    height: _,
                    prove: _,
                } => {
                    if path == "dry_run_tx" {
                        let result = self
                            .dry_run_tx(&data)
                            .map_err(|e| format!("{}", e));

                        reply.send(result).map_err(|e| {
                            Error::AbciChannelSendError(format!(
                                "ApplyTx {}",
                                e
                            ))
                        })?
                    }
                }
            }
        }
    }
}

impl Shell {
    pub fn init_chain(&mut self, chain_id: String) -> Result<()> {
        self.storage
            .set_chain_id(&chain_id)
            .map_err(Error::StorageError)
    }

    /// Validate a transaction request. On success, the transaction will
    /// included in the mempool and propagated to peers, otherwise it will be
    /// rejected.
    pub fn mempool_validate(
        &self,
        tx_bytes: &[u8],
        r#_type: MempoolTxType,
    ) -> Result<()> {
        let _tx = Tx::decode(tx_bytes).map_err(Error::TxDecodingError)?;
        Ok(())
    }

    /// Validate and apply a transaction.
    pub fn apply_tx(
        &mut self,
        tx_bytes: &[u8],
    ) -> (i64, Result<protocol::TxResult>) {
        let result = protocol::apply_tx(
            tx_bytes,
            &mut self.gas_meter,
            &mut self.write_log,
            &self.storage,
        )
        .map_err(Error::TxError);

        match result {
            Ok(result) => {
                if result.is_accepted() {
                    tracing::debug!(
                        "all VPs accepted apply_tx storage modification {:#?}",
                        result
                    );
                    self.write_log.commit_tx();
                } else {
                    tracing::debug!(
                        "some VPs rejected apply_tx storage modification {:#?}",
                        result.vps_result.rejected_vps
                    );
                    self.write_log.drop_tx();
                }

                let gas = gas::as_i64(result.gas_used);
                (gas, Ok(result))
            }
            err @ Err(_) => {
                let gas =
                    gas::as_i64(self.gas_meter.get_current_transaction_gas());
                (gas, err)
            }
        }
    }

    /// Simulate validation and application of a transaction.
    pub fn dry_run_tx(&mut self, tx_bytes: &[u8]) -> Result<String> {
        let mut gas_meter = BlockGasMeter::default();
        let mut write_log = self.write_log.clone();
        let result = protocol::apply_tx(
            tx_bytes,
            &mut gas_meter,
            &mut write_log,
            &self.storage,
        )
        .map_err(Error::TxError)?;
        Ok(result.to_string())
    }

    /// Begin a new block.
    pub fn begin_block(&mut self, hash: BlockHash, height: BlockHeight) {
        self.gas_meter.reset();
        self.storage.begin_block(hash, height).unwrap();
    }

    /// End a block.
    pub fn end_block(&mut self, _height: BlockHeight) {}

    /// Commit a block. Persist the application state and return the Merkle root
    /// hash.
    pub fn commit(&mut self) -> MerkleRoot {
        // commit changes from the write-log to storage
        self.write_log
            .commit_block(&mut self.storage)
            .expect("Expected committing block write log success");
        // TODO with VPs in storage, this prints out too much spam
        // tracing::debug!("storage to commit {:#?}", self.storage);
        // store the block's data in DB
        // TODO commit async?
        self.storage.commit().unwrap_or_else(|e| {
            tracing::error!(
                "Encountered a storage error while committing a block {:?}",
                e
            )
        });
        let root = self.storage.merkle_root();
        MerkleRoot(root.as_slice().to_vec())
    }

    /// Load the Merkle root hash and the height of the last committed block, if
    /// any.
    pub fn last_state(&mut self) -> Option<(MerkleRoot, u64)> {
        let result = self.storage.load_last_state().unwrap_or_else(|e| {
            tracing::error!(
                "Encountered an error while reading last state from
        storage {}",
                e
            );
            None
        });
        match &result {
            Some((root, height)) => {
                tracing::info!(
                    "Last state root hash: {}, height: {}",
                    ByteBuf(&root.0),
                    height
                )
            }
            None => {
                tracing::info!("No state could be found")
            }
        }
        result
    }
}
