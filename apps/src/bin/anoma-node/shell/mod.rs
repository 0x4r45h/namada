pub mod gas;
pub mod storage;
mod tendermint;

use core::fmt;
use std::collections::{HashMap, HashSet};
use std::ops::Add;
use std::path::Path;
use std::sync::mpsc;
use std::vec;

use anoma::proto::types::Tx;
use anoma::wallet;
use anoma_shared::bytes::ByteBuf;
use anoma_shared::types::token::Amount;
use anoma_shared::types::{
    address, key, token, Address, BlockHash, BlockHeight, Key,
};
use borsh::BorshSerialize;
use prost::Message;
use rayon::prelude::{IntoParallelRefIterator, ParallelIterator};
use thiserror::Error;

use self::gas::{BlockGasMeter, VpGasMeter};
use self::storage::PersistentStorage;
use self::tendermint::{AbciMsg, AbciReceiver};
use crate::vm::host_env::write_log::WriteLog;
use crate::vm::{self, TxRunner, VpRunner};

#[derive(Error, Debug)]
pub enum Error {
    #[error("Error removing the DB data: {0}")]
    RemoveDB(std::io::Error),
    #[error("Storage error: {0}")]
    StorageError(storage::Error),
    #[error("Shell ABCI channel receiver error: {0}")]
    AbciChannelRecvError(mpsc::RecvError),
    #[error("Shell ABCI channel sender error: {0}")]
    AbciChannelSendError(String),
    #[error("Error decoding a transaction from bytes: {0}")]
    TxDecodingError(prost::DecodeError),
    #[error("Transaction runner error: {0}")]
    TxRunnerError(vm::Error),
    #[error("Gas error: {0}")]
    GasError(gas::Error),
    #[error("Error executing VP for addresses: {0:?}")]
    VpExecutionError(HashSet<Address>),
    #[error("Transaction gas overflow")]
    GasOverflow,
}

pub type Result<T> = std::result::Result<T, Error>;

pub fn run(config: anoma::config::Ledger) -> Result<()> {
    // open a channel between ABCI (the sender) and the shell (the receiver)
    let (sender, receiver) = mpsc::channel();
    let shell = Shell::new(receiver, &config.db);
    // Run Tendermint ABCI server in another thread
    std::thread::spawn(move || tendermint::run(sender, config));
    shell.run()
}

pub fn reset(config: anoma::config::Ledger) -> Result<()> {
    // simply nuke the DB files
    let db_path = &config.db;
    match std::fs::remove_dir_all(&db_path) {
        Err(e) if e.kind() == std::io::ErrorKind::NotFound => (),
        res => res.map_err(Error::RemoveDB)?,
    };
    // reset Tendermint state
    tendermint::reset(config);
    Ok(())
}

#[derive(Debug)]
pub struct Shell {
    abci: AbciReceiver,
    storage: storage::PersistentStorage,
    // The gas meter is sync with mutex to allow VPs sharing it
    // TODO it should be possible to impl a lock-free gas metering for VPs
    gas_meter: BlockGasMeter,
    write_log: WriteLog,
}

#[derive(Clone, Debug)]
pub enum MempoolTxType {
    /// A transaction that has not been validated by this node before
    NewTransaction,
    /// A transaction that has been validated at some previous level that may
    /// need to be validated again
    RecheckTransaction,
}

pub struct MerkleRoot(pub Vec<u8>);

impl Shell {
    pub fn new(abci: AbciReceiver, db_path: impl AsRef<Path>) -> Self {
        let mut storage = PersistentStorage::new(db_path);

        let token_vp = std::fs::read("vps/vp_token/vp.wasm")
            .expect("cannot load token VP");
        let user_vp =
            std::fs::read("vps/vp_user/vp.wasm").expect("cannot load user VP");

        // TODO load initial accounts from genesis

        // temporary account addresses for testing, generated by the address.rs
        // module
        let ada = Address::decode("a1qq5qqqqqg4znssfsgcurjsfhgfpy2vjyxy6yg3z98pp5zvp5xgersvfjxvcnx3f4xycrzdfkak0xhx")
            .expect("The genesis address shouldn't fail decoding");
        let alan = Address::decode("a1qq5qqqqqxv6yydz9xc6ry33589q5x33eggcnjs2xx9znydj9xuens3phxppnwvzpg4rrqdpswve4n9")
        .expect("The genesis address shouldn't fail decoding");
        let alonzo = Address::decode("a1qq5qqqqqxsuygd2x8pq5yw2ygdryxs6xgsmrsdzx8pryxv34gfrrssfjgccyg3zpxezrqd2y2s3g5s")
            .expect("The genesis address shouldn't fail decoding");
        let xan = address::xan();
        let btc = address::btc();
        let xtz = address::xtz();

        // default tokens VPs for testing
        let xan_vp = Key::validity_predicate(&xan).expect("expected VP key");
        let btc_vp = Key::validity_predicate(&btc).expect("expected VP key");
        let xtz_vp = Key::validity_predicate(&xtz).expect("expected VP key");
        storage
            .write(&xan_vp, token_vp.to_vec())
            .expect("Unable to write token VP");
        storage
            .write(&btc_vp, token_vp.to_vec())
            .expect("Unable to write token VP");
        storage
            .write(&xtz_vp, token_vp.to_vec())
            .expect("Unable to write token VP");

        // default user VPs for testing
        let ada_vp = Key::validity_predicate(&ada).expect("expected VP key");
        let alan_vp = Key::validity_predicate(&alan).expect("expected VP key");
        let alonzo_vp =
            Key::validity_predicate(&alonzo).expect("expected VP key");
        storage
            .write(&ada_vp, user_vp.to_vec())
            .expect("Unable to write user VP");
        storage
            .write(&alan_vp, user_vp.to_vec())
            .expect("Unable to write user VP");
        storage
            .write(&alonzo_vp, user_vp.to_vec())
            .expect("Unable to write user VP");

        // default user's tokens for testing
        let ada_xan = token::balance_key(&xan, &ada);
        let ada_btc = token::balance_key(&btc, &ada);
        let alan_xan = token::balance_key(&xan, &alan);
        let alonzo_xan = token::balance_key(&xan, &alonzo);
        let alonzo_xtz = token::balance_key(&xtz, &alonzo);

        storage
            .write(
                &ada_xan,
                Amount::whole(800_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &ada_btc,
                Amount::whole(100)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &alan_xan,
                Amount::whole(200_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &alonzo_xan,
                Amount::whole(1_000_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");
        storage
            .write(
                &alonzo_xtz,
                Amount::whole(50_000)
                    .try_to_vec()
                    .expect("encode token amount"),
            )
            .expect("Unable to set genesis balance");

        // default user's public keys for testing
        let ada_pk = key::ed25519::pk_key(&ada);
        let alan_pk = key::ed25519::pk_key(&alan);
        let alonzo_pk = key::ed25519::pk_key(&alonzo);

        storage
            .write(
                &ada_pk,
                wallet::ada_pk().try_to_vec().expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");
        storage
            .write(
                &alan_pk,
                wallet::alan_pk().try_to_vec().expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");
        storage
            .write(
                &alonzo_pk,
                wallet::alonzo_pk().try_to_vec().expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");

        // Temporary for testing, we have a fixed matchmaker account.
        // This account has a public key for signing matchmaker txs and
        // verifying their signatures in its VP. The VP is the same as
        // the user's VP, which simply checks the signature.
        // We could consider using the same key as the intent broadcaster's p2p
        // key.
        let matchmaker = address::matchmaker();
        let matchmaker_pk = key::ed25519::pk_key(&matchmaker);
        storage
            .write(
                &matchmaker_pk,
                wallet::matchmaker_pk()
                    .try_to_vec()
                    .expect("encode public key"),
            )
            .expect("Unable to set genesis user public key");
        let matchmaker_vp =
            Key::validity_predicate(&matchmaker).expect("expected VP key");
        storage
            .write(&matchmaker_vp, user_vp.to_vec())
            .expect("Unable to write matchmaker VP");

        Self {
            abci,
            storage,
            gas_meter: BlockGasMeter::default(),
            write_log: WriteLog::new(),
        }
    }

    /// Run the shell in the current thread (blocking).
    pub fn run(mut self) -> Result<()> {
        loop {
            let msg = self.abci.recv().map_err(Error::AbciChannelRecvError)?;
            match msg {
                AbciMsg::GetInfo { reply } => {
                    let result = self.last_state();
                    reply.send(result).map_err(|e| {
                        Error::AbciChannelSendError(format!("GetInfo {}", e))
                    })?
                }
                AbciMsg::InitChain { reply, chain_id } => {
                    self.init_chain(chain_id)?;
                    reply.send(()).map_err(|e| {
                        Error::AbciChannelSendError(format!("InitChain {}", e))
                    })?
                }
                AbciMsg::MempoolValidate { reply, tx, r#type } => {
                    let result = self
                        .mempool_validate(&tx, r#type)
                        .map_err(|e| format!("{}", e));
                    reply.send(result).map_err(|e| {
                        Error::AbciChannelSendError(format!(
                            "MempoolValidate {}",
                            e
                        ))
                    })?
                }
                AbciMsg::BeginBlock {
                    reply,
                    hash,
                    height,
                } => {
                    self.begin_block(hash, height);
                    reply.send(()).map_err(|e| {
                        Error::AbciChannelSendError(format!("BeginBlock {}", e))
                    })?
                }
                AbciMsg::ApplyTx { reply, tx } => {
                    let result =
                        self.apply_tx(&tx).map_err(|e| format!("{}", e));
                    reply.send(result).map_err(|e| {
                        Error::AbciChannelSendError(format!("ApplyTx {}", e))
                    })?
                }
                AbciMsg::EndBlock { reply, height } => {
                    self.end_block(height);
                    reply.send(()).map_err(|e| {
                        Error::AbciChannelSendError(format!("EndBlock {}", e))
                    })?
                }
                AbciMsg::CommitBlock { reply } => {
                    let result = self.commit();
                    reply.send(result).map_err(|e| {
                        Error::AbciChannelSendError(format!(
                            "CommitBlock {}",
                            e
                        ))
                    })?
                }
                AbciMsg::AbciQuery {
                    reply,
                    path,
                    data,
                    height: _,
                    prove: _,
                } => {
                    if path == "dry_run_tx" {
                        let result = self
                            .dry_run_tx(&data)
                            .map_err(|e| format!("{}", e));

                        reply.send(result).map_err(|e| {
                            Error::AbciChannelSendError(format!(
                                "ApplyTx {}",
                                e
                            ))
                        })?
                    }
                }
            }
        }
    }
}
#[derive(Clone, Debug)]
struct VpsGas {
    max: u64,
    rest: Vec<u64>,
}

impl Default for VpsGas {
    fn default() -> Self {
        Self {
            max: 0,
            rest: Vec::new(),
        }
    }
}

#[derive(Clone, Debug)]
struct VpsResult {
    pub accepted_vps: HashSet<Address>,
    pub rejected_vps: HashSet<Address>,
    pub changed_keys: Vec<Key>,
    pub gas_used: VpsGas,
    pub have_error: bool,
}

impl VpsGas {
    fn merge(&mut self, other: &mut VpsGas, initial_gas: u64) -> Result<()> {
        if other.max > self.max {
            self.rest.push(self.max);
            self.max = other.max;
        } else {
            self.rest.push(other.max);
            self.rest.append(&mut other.rest);
        }

        let parallel_gas: u64 = (self.rest.clone().iter().sum::<u64>() as f64
            * VpGasMeter::parallel_fee())
            as u64;

        if self.max.add(initial_gas).add(parallel_gas)
            > VpGasMeter::transaction_gas_limit()
        {
            return Err(Error::GasOverflow);
        }
        Ok(())
    }
}

impl VpsResult {
    pub fn new(
        accepted_vps: HashSet<Address>,
        rejected_vps: HashSet<Address>,
        changed_keys: Vec<Key>,
        gas_used: VpsGas,
        have_error: bool,
    ) -> Self {
        Self {
            accepted_vps,
            rejected_vps,
            changed_keys,
            gas_used,
            have_error,
        }
    }
}

impl fmt::Display for VpsResult {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Vps -> accepted: {:?}. rejected: {:?}, keys: {:?}, gas_used: \
             {:?}, error: {:}",
            self.accepted_vps,
            self.rejected_vps,
            self.changed_keys,
            self.gas_used.max, // TODO: change
            self.have_error
        )
    }
}

impl Default for VpsResult {
    fn default() -> Self {
        Self {
            accepted_vps: HashSet::default(),
            rejected_vps: HashSet::default(),
            changed_keys: Vec::default(),
            gas_used: VpsGas::default(),
            have_error: false,
        }
    }
}

#[derive(Clone, Debug)]
struct TxResult {
    // a value of 0 indicates that the transaction overflowed with gas
    gas_used: u64,
    vps: VpsResult,
    valid: bool,
}

impl TxResult {
    pub fn new(gas: Result<u64>, vps: VpsResult) -> Self {
        let mut tx_result = TxResult {
            gas_used: gas.unwrap_or(0),
            vps,
            valid: false,
        };
        tx_result.valid = tx_result.is_tx_correct();
        tx_result
    }

    pub fn is_tx_correct(&self) -> bool {
        self.vps.rejected_vps.is_empty()
    }
}

impl fmt::Display for TxResult {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Transaction is valid: {}. Gas used: {}, vps: {}",
            self.valid,
            self.gas_used,
            self.vps.to_string(),
        )
    }
}

impl Shell {
    pub fn init_chain(&mut self, chain_id: String) -> Result<()> {
        self.storage
            .set_chain_id(&chain_id)
            .map_err(Error::StorageError)
    }

    /// Validate a transaction request. On success, the transaction will
    /// included in the mempool and propagated to peers, otherwise it will be
    /// rejected.
    pub fn mempool_validate(
        &self,
        tx_bytes: &[u8],
        r#_type: MempoolTxType,
    ) -> Result<()> {
        let _tx = Tx::decode(tx_bytes).map_err(Error::TxDecodingError)?;
        Ok(())
    }

    /// Validate and apply a transaction.
    pub fn dry_run_tx(&mut self, tx_bytes: &[u8]) -> Result<String> {
        let mut gas_meter = BlockGasMeter::default();
        let mut write_log = self.write_log.clone();
        let result =
            run_tx(tx_bytes, &mut gas_meter, &mut write_log, &self.storage)?;
        Ok(result.to_string())
    }

    /// Validate and apply a transaction.
    pub fn apply_tx(&mut self, tx_bytes: &[u8]) -> Result<u64> {
        let result = run_tx(
            tx_bytes,
            &mut self.gas_meter.clone(),
            &mut self.write_log,
            &self.storage,
        )?;
        // Apply the transaction if accepted by all the VPs
        if result.vps.rejected_vps.is_empty() {
            log::debug!(
                "all VPs accepted apply_tx storage modification {:#?}",
                result
            );
            self.write_log.commit_tx();
        } else {
            log::debug!(
                "some VPs rejected apply_tx storage modification {:#?}",
                result.vps.rejected_vps
            );
            self.write_log.drop_tx();
        }
        Ok(result.gas_used)
    }

    /// Begin a new block.
    pub fn begin_block(&mut self, hash: BlockHash, height: BlockHeight) {
        self.gas_meter.reset();
        self.storage.begin_block(hash, height).unwrap();
    }

    /// End a block.
    pub fn end_block(&mut self, _height: BlockHeight) {}

    /// Commit a block. Persist the application state and return the Merkle root
    /// hash.
    pub fn commit(&mut self) -> MerkleRoot {
        // commit changes from the write-log to storage
        self.write_log
            .commit_block(&mut self.storage)
            .expect("Expected committing block write log success");
        // TODO with VPs in storage, this prints out too much spam
        // log::debug!("storage to commit {:#?}", self.storage);
        // store the block's data in DB
        // TODO commit async?
        self.storage.commit().unwrap_or_else(|e| {
            log::error!(
                "Encountered a storage error while committing a block {:?}",
                e
            )
        });
        let root = self.storage.merkle_root();
        MerkleRoot(root.as_slice().to_vec())
    }

    /// Load the Merkle root hash and the height of the last committed block, if
    /// any.
    pub fn last_state(&mut self) -> Option<(MerkleRoot, u64)> {
        let result = self.storage.load_last_state().unwrap_or_else(|e| {
            log::error!(
                "Encountered an error while reading last state from
        storage {}",
                e
            );
            None
        });
        match &result {
            Some((root, height)) => {
                log::info!(
                    "Last state root hash: {}, height: {}",
                    ByteBuf(&root.0),
                    height
                )
            }
            None => {
                log::info!("No state could be found")
            }
        }
        result
    }
}

fn get_verifiers(
    write_log: &WriteLog,
    verifiers: &HashSet<Address>,
) -> HashMap<Address, Vec<Key>> {
    let mut verifiers =
        verifiers.iter().fold(HashMap::new(), |mut acc, addr| {
            acc.insert(addr.clone(), vec![]);
            acc
        });
    // get changed keys grouped by the address
    for key in write_log.get_changed_keys() {
        for addr in &key.find_addresses() {
            match verifiers.get_mut(&addr) {
                Some(keys) => keys.push(key.clone()),
                None => {
                    verifiers.insert(addr.clone(), vec![key.clone()]);
                }
            }
        }
    }
    // The new accounts should be validated by every verifier's VP
    for key in write_log.get_initialized_accounts() {
        for (_verifier, keys) in verifiers.iter_mut() {
            keys.push(key.clone());
        }
    }
    verifiers
}

fn run_tx(
    tx_bytes: &[u8],
    block_gas_meter: &mut BlockGasMeter,
    write_log: &mut WriteLog,
    storage: &PersistentStorage,
) -> Result<TxResult> {
    block_gas_meter
        .add_base_transaction_fee(tx_bytes.len())
        .map_err(Error::GasError)?;

    let tx = Tx::decode(tx_bytes).map_err(Error::TxDecodingError)?;

    // Execute the transaction code
    let verifiers = execute_tx(&tx, storage, block_gas_meter, write_log)?;

    let vps_result =
        check_vps(&tx, storage, block_gas_meter, write_log, &verifiers)?;

    let gas = block_gas_meter
        .finalize_transaction()
        .map_err(Error::GasError);

    Ok(TxResult::new(gas, vps_result))
}

fn check_vps(
    tx: &Tx,
    storage: &PersistentStorage,
    gas_meter: &mut BlockGasMeter,
    write_log: &mut WriteLog,
    verifiers: &HashSet<Address>,
) -> Result<VpsResult> {
    let verifiers = get_verifiers(write_log, verifiers);

    let tx_data = tx.data.clone().unwrap_or_default();
    let tx_code = tx.code.clone();

    let verifiers_vps: Vec<(Address, Vec<Key>, Vec<u8>)> = verifiers
        .iter()
        .map(|(addr, keys)| {
            let vp = storage
                .validity_predicate(&addr)
                .map_err(Error::StorageError)?;

            gas_meter
                .add_compiling_fee(vp.len())
                .map_err(Error::GasError)?;

            Ok((addr.clone(), keys.clone(), vp))
        })
        .collect::<std::result::Result<_, _>>()?;

    let initial_gas = gas_meter.get_current_transaction_gas();

    let mut vps_result = run_vps(
        verifiers_vps,
        tx_data,
        tx_code,
        storage,
        write_log,
        initial_gas,
    )?;

    gas_meter
        .add(vps_result.gas_used.max)
        .map_err(Error::GasError)?;
    gas_meter
        .add_parallel_fee(&mut vps_result.gas_used.rest)
        .map_err(Error::GasError)?;

    Ok(vps_result)
}

fn execute_tx(
    tx: &Tx,
    storage: &PersistentStorage,
    gas_meter: &mut BlockGasMeter,
    write_log: &mut WriteLog,
) -> Result<HashSet<Address>> {
    let tx_code = tx.code.clone();
    gas_meter
        .add_compiling_fee(tx_code.len())
        .map_err(Error::GasError)?;
    let tx_data = tx.data.clone().unwrap_or_default();
    let mut verifiers = HashSet::new();

    let tx_runner = TxRunner::new();

    tx_runner
        .run(
            storage,
            write_log,
            &mut verifiers,
            gas_meter,
            tx_code,
            tx_data,
        )
        .map_err(Error::TxRunnerError)?;

    Ok(verifiers)
}

fn run_vps(
    verifiers: Vec<(Address, Vec<Key>, Vec<u8>)>,
    tx_data: Vec<u8>,
    tx_code: Vec<u8>,
    storage: &PersistentStorage,
    write_log: &mut WriteLog,
    initial_gas: u64,
) -> Result<VpsResult> {
    let addresses = verifiers
        .iter()
        .map(|(addr, _, _)| addr)
        .collect::<HashSet<_>>();

    verifiers
        .par_iter()
        .try_fold(VpsResult::default, |result, (addr, keys, vp)| {
            run_vp(
                result,
                tx_data.clone(),
                tx_code.clone(),
                storage,
                write_log,
                addresses.clone(),
                &mut VpGasMeter::new(initial_gas),
                (addr, keys, vp),
            )
        })
        .try_reduce(VpsResult::default, |a, b| {
            merge_vp_results(a, b, initial_gas)
        })
}

fn merge_vp_results(
    a: VpsResult,
    mut b: VpsResult,
    initial_gas: u64,
) -> Result<VpsResult> {
    let accepted_vps = a.accepted_vps.union(&b.accepted_vps).collect();
    let rejected_vps = a.rejected_vps.union(&b.rejected_vps).collect();
    let mut changed_keys = a.changed_keys;
    changed_keys.append(&mut b.changed_keys);
    let mut gas_used = a.gas_used;

    // Returning error from here will short-circuit the VP parallel execution.
    // It's important that we only short-circuit gas errors to get deterministic
    // gas costs

    gas_used.merge(&mut b.gas_used, initial_gas)?;

    Ok(VpsResult::new(
        accepted_vps,
        rejected_vps,
        changed_keys,
        gas_used,
        a.have_error || b.have_error,
    ))
}

#[allow(clippy::too_many_arguments)]
fn run_vp(
    mut result: VpsResult,
    tx_data: Vec<u8>,
    tx_code: Vec<u8>,
    storage: &PersistentStorage,
    write_log: &WriteLog,
    addresses: HashSet<Address>,
    vp_gas_meter: &mut VpGasMeter,
    (addr, keys, vp): (&Address, &[Key], &[u8]),
) -> Result<VpsResult> {
    let vp_runner = VpRunner::new();

    let accept = vp_runner.run(
        vp,
        tx_data,
        &tx_code,
        addr,
        storage,
        write_log,
        vp_gas_meter,
        keys.to_vec(),
        addresses,
    );
    result.changed_keys.extend_from_slice(&keys);

    match accept {
        Ok(accepted) => {
            if !accepted {
                result.rejected_vps.insert(addr.clone());
            } else {
                result.accepted_vps.insert(addr.clone());
            }
        }
        Err(_) => {
            result.rejected_vps.insert(addr.clone());
            result.have_error = true;
        }
    }

    if vp_gas_meter.gas_overflow() {
        // Returning error from here will short-circuit the VP parallel
        // execution. It's important that we only short-circuit gas
        // errors to get deterministic gas costs
        Err(Error::VpExecutionError(result.rejected_vps))
    } else {
        Ok(result)
    }
}
